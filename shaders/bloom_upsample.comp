#version 460

#include "include/common.glsl"
#include "include/types.glsl"

#include "include/functions.glsl"

RegisterFloatImageFormat(r11f_g11f_b10f);

layout(push_constant, std430) uniform PushConstants {
    uvec2 image_size;
    uint input_image;
    uint output_image;
    float filter_radius;
};

layout (local_size_x = 8, local_size_y = 8) in;

void main() {
    if (gl_GlobalInvocationID.x >= image_size.x || gl_GlobalInvocationID.y >= image_size.y) return;

    uvec2 pixel = gl_GlobalInvocationID.xy;
    vec2 size_rcp = 1.0 / vec2(image_size);
    float r = filter_radius;
    // https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/
    //   1 |1 2 1|   z y z     x 0.25
    //  -- |2 4 2|   y x y     y 0.125
    //  16 |1 2 1|   z y z     z 0.0625
    vec3 x = texture(GetSampledTexture2D(input_image), pixel * size_rcp).xyz;

    vec3 y0 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2( r,  0)).xyz;
    vec3 y1 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2( 0,  r)).xyz;
    vec3 y2 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2(-r,  0)).xyz;
    vec3 y3 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2( 0, -r)).xyz;

    vec3 z0 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2( r,  r)).xyz;
    vec3 z1 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2(-r, -r)).xyz;
    vec3 z2 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2(-r,  r)).xyz;
    vec3 z3 = texture(GetSampledTexture2D(input_image), pixel * size_rcp + vec2( r, -r)).xyz;
    
    vec3 result = 
        x * 0.25 +
        (y0+y1+y2+y3) * 0.125 +
        (z0+z1+z2+z3) * 0.0625;

    vec3 old = imageLoad(GetImage2D(r11f_g11f_b10f, output_image), ivec2(gl_GlobalInvocationID.xy)).xyz;
    imageStore(GetImage2D(r11f_g11f_b10f, output_image), ivec2(gl_GlobalInvocationID.xy), vec4(old + result, 0.0));
}