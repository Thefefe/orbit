#version 460

#include "include/common.glsl"
#include "include/types.glsl"
#include "include/functions.glsl"

#extension GL_EXT_debug_printf : enable

#define USE_SUBGROUP_OPS

#ifdef USE_SUBGROUP_OPS
	#extension GL_KHR_shader_subgroup_vote : require
	#extension GL_KHR_shader_subgroup_arithmetic : require
	#extension GL_KHR_shader_subgroup_ballot : require
#endif

layout(push_constant, std430) uniform PushConstants {
    uint entity_draw_buffer;
	uint mesh_info_buffer;
	uint meshlet_dispatch_buffer;
	uint entity_buffer;
	uint cull_info_buffer;
};

layout (local_size_x = 256) in;

float largest_scale_from_matrix(mat3 matrix) {
	vec3 x = matrix[0];
	vec3 y = matrix[1];
	vec3 z = matrix[2]; 

	float largest_scale_sqr = max(dot(x, x), max(dot(y, y), dot(z, z)));
	return sqrt(largest_scale_sqr);
}

vec4 transform_sphere(mat4 matrix, vec4 sphere) {
	vec4 bounding_sphere = matrix * vec4(sphere.xyz, 1.0);
	bounding_sphere /= bounding_sphere.w;
	bounding_sphere.w = sphere.w * largest_scale_from_matrix(mat3(matrix));

	return bounding_sphere;
}

bool aabb_plane_test(vec3 box_min, vec3 box_max, vec4 plane) {
	vec3 c = (box_max + box_min) * 0.5f; // Compute AABB center
    vec3 e = box_max - c; // Compute positive extents

    // Compute the projection interval radius of b onto L(t) = b.c + t * p.n
    float radius = e.x * abs(plane.x) + e.y * abs(plane.y) + e.z * abs(plane.z);

    float center_distance = dot(plane.xyz, c) - plane.w;

    return center_distance > radius;
}

bool is_aabb_inside_frustum(mat4 mvp_matrix, Aabb aabb, uint plane_mask) {
	bool inside_frustum = true;

	vec3 aabb_min = vec3(aabb.min_pos[0], aabb.min_pos[1], aabb.min_pos[2]);
	vec3 aabb_max = vec3(aabb.max_pos[0], aabb.max_pos[1], aabb.max_pos[2]);

	mat4 mvp_t = transpose(mvp_matrix);
	vec4 planes[6];
	planes[0] = mvp_t[3] + mvp_t[0];
	planes[1] = mvp_t[3] - mvp_t[0];
	planes[2] = mvp_t[3] + mvp_t[1];
	planes[3] = mvp_t[3] - mvp_t[1];
	planes[4] = mvp_t[3] + mvp_t[2];
	planes[5] = mvp_t[3] - mvp_t[2];

	for (uint i = 0; i < 5; i += 1) {
		inside_frustum = inside_frustum && (
			(plane_mask & (1 << i)) == 0 ||
			!aabb_plane_test(aabb_min, aabb_max	, vec4(-planes[i].xyz, planes[i].w))
		);
	}

	return inside_frustum;
}

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
vec4 project_sphere(vec4 sphere, float znear, float P00, float P11) {
	vec4 aabb;
	vec3 C = sphere.xyz;
	float r = sphere.w;

	vec2 cx = -C.xz;
	vec2 vx = vec2(sqrt(dot(cx, cx) - r * r), r);
	vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
	vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

	vec2 cy = -C.yz;
	vec2 vy = vec2(sqrt(dot(cy, cy) - r * r), r);
	vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
	vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

	aabb = vec4(minx.x / minx.y * P00, miny.x / miny.y * P11, maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
	aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

	return aabb;
}

void main() {
    uint gID = gl_GlobalInvocationID.x;
	if (gID < GetBuffer(EntityDrawBuffer, entity_draw_buffer).count) {
		EntityDraw entity_draw = GetBuffer(EntityDrawBuffer, entity_draw_buffer).draws[gID];
		MeshInfo mesh_info = GetBuffer(MeshInfoBuffer, mesh_info_buffer).mesh_infos[entity_draw.mesh_index];
		EntityData entity_data = GetBuffer(EntityBuffer, entity_buffer).entities[entity_draw.entity_index];

		CullInfo cull_info = GetBuffer(CullInfoBuffer, cull_info_buffer).cull_info;
		
		bool visible = true;
		bool visible_in_buffer = true;
		bool meshlet_occlusion_culling = cull_info.meshlet_visibility_buffer != 0;

		if (cull_info.occlusion_pass == 1 || cull_info.occlusion_pass == 2 || cull_info.occlusion_pass == 4) {
			uint visibility_bitset = GetBuffer(VisibilityBuffer, cull_info.visibility_buffer).entries[gID / 32];
			visible_in_buffer = (visibility_bitset & (1 << (gID % 32))) > 0;
		}


		// first occlusion pass: only proccess if submesh was visible last frame
		if (cull_info.occlusion_pass == 1) visible = visible_in_buffer;

		vec4 model_space_bounding_sphere = vec4(
			mesh_info.bounding_sphere[0],
			mesh_info.bounding_sphere[1],
			mesh_info.bounding_sphere[2],
			mesh_info.bounding_sphere[3]
		);
		vec4 bounding_sphere_view_space = transform_sphere(
			cull_info.view_matrix * entity_data.model_matrix,
			model_space_bounding_sphere
		);

		// frustum culling
		if (visible) {
			for (uint i = 0; i < cull_info.cull_plane_count; i++) {
				vec4 plane = cull_info.cull_planes[i];
				float point_plane_distance = dot(plane.xyz, bounding_sphere_view_space.xyz) + plane.w;
				bool inside_frustum = point_plane_distance > -bounding_sphere_view_space.w;
				visible = visible && inside_frustum;
			}
		}

		// occlusion cull
		if ((cull_info.occlusion_pass == 2 || cull_info.occlusion_pass == 4) && visible) {
			bool cullable = true;
			vec4 aabb;
			float sphere_closest_depth;
			float sampled_depth;

			switch (cull_info.projection_type) {
				case 0: { // perspective
					bounding_sphere_view_space.z = -bounding_sphere_view_space.z;
					cullable = bounding_sphere_view_space.z >= bounding_sphere_view_space.w + cull_info.z_near;
					aabb = project_sphere(
						bounding_sphere_view_space,
						cull_info.z_near,
						cull_info.p00_or_width_recipx2,
						cull_info.p11_or_height_recipx2
					);
					sphere_closest_depth = cull_info.z_near / (bounding_sphere_view_space.z - bounding_sphere_view_space.w);
				} break;
				case 1: {
					vec2 size_recip = vec2(cull_info.p00_or_width_recipx2);
					vec2 sphere_center = bounding_sphere_view_space.xy * size_recip;
					vec2 sphere_box_size = size_recip * bounding_sphere_view_space.w;
					aabb = sphere_center.xyxy + sphere_box_size.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
					aabb = clamp(aabb, -1.0, 1.0) * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f);

                    float closest_z = bounding_sphere_view_space.z + bounding_sphere_view_space.w;
                    float r = 1.0 / (cull_info.z_far - cull_info.z_near);
                    sphere_closest_depth = closest_z * r + (r * cull_info.z_far);
				} break;
			}

			// occlusion culling
			if (cullable && cull_info.occlusion_pass != 4) {
				vec2 pyramid_size = textureSize(GetSampledTexture2D(cull_info.depth_pyramid), 0);
				float width = (aabb.z - aabb.x) * pyramid_size.x;
				float height = (aabb.w - aabb.y) * pyramid_size.y;

				sampled_depth = textureLod(
					sampler2D(GetTexture2D(cull_info.depth_pyramid), GetSampler(REDUCE_MIN_SAMPLER)),
					(aabb.xy + aabb.zw) * 0.5,
					log2(max(width, height))
				).x;
				visible = sphere_closest_depth >= sampled_depth;
			}

			// shadow mask culling
			if (cullable && cull_info.occlusion_pass == 4) {
				vec2 pyramid_size = textureSize(GetSampledTexture2D(cull_info.depth_pyramid), 0);
				float width = (aabb.z - aabb.x) * pyramid_size.x;
				float height = (aabb.w - aabb.y) * pyramid_size.y;

				sampled_depth = textureLod(
					sampler2D(GetTexture2D(cull_info.depth_pyramid), GetSampler(REDUCE_MIN_SAMPLER)),
					(aabb.xy + aabb.zw) * 0.5,
					log2(max(width, height))
				).x;
				visible = sampled_depth == 0.0; // zero means there is a shadow receiver there
			}
		}

		bool should_draw = true;
			// visible && bool((1 << submesh.alpha_mode) & cull_info.alpha_mode_flag);

		// second occlusion pass: only proccess if submesh wasn't visible last frame
		// if meshlet occlusion culling is enabled, also draw entities that were visible in the early pass
		// so their newly visible meshlets can be rendered
		if (((cull_info.occlusion_pass == 2 && !meshlet_occlusion_culling) || cull_info.occlusion_pass == 4)
			// && !bool((1 << submesh.alpha_mode) & cull_info.noskip_alphamode)
		) {
			should_draw = visible && !visible_in_buffer;
		}

		// draw command fill
		if (should_draw) {
			uint dispatch_count = (mesh_info.meshlet_count + 32 - 1) / 32;
			uint dispatch_offset = atomicAdd(GetBuffer(MeshletDispatchBuffer, meshlet_dispatch_buffer).workgroup_count_x, dispatch_count);
			uint visibility_offset = entity_draw.visibility_offset;

			for (uint dispatch_index = 0; dispatch_index < dispatch_count; dispatch_index++) {
				MeshletDispatch dispatch;
    			dispatch.entity_index       = entity_draw.entity_index;
    			dispatch.mesh_index         = entity_draw.mesh_index;
    			dispatch.meshlet_offset     = mesh_info.meshlet_offset + 32 * dispatch_index;
    			dispatch.meshlet_count      = min(mesh_info.meshlet_count - 32 * dispatch_index, 32);
    			dispatch.visibility_offset  = visibility_offset;
				GetBuffer(MeshletDispatchBuffer, meshlet_dispatch_buffer).dispatches[dispatch_offset + dispatch_index] = dispatch;

				visibility_offset += dispatch.meshlet_count / 32;
			}
		}

		// update visibility buffer, only on second occlusion pass
		if (cull_info.occlusion_pass == 2) {
#ifdef USE_SUBGROUP_OPS
			uvec4 visiblity_bitset = subgroupBallot(visible);
			
			if (subgroupElect()) {
				for (uint i = 0; i < gl_SubgroupSize / 32; i++) {
					GetBuffer(VisibilityBuffer, cull_info.visibility_buffer)
						.entries[gID / gl_SubgroupSize + i] = visiblity_bitset.x;
				}
			}
#else
			GetBuffer(VisibilityBuffer, cull_info.visibility_buffer).submeshes[gID/32] = 0;
			barrier();
			uint bitset = uint(visible) << (gID % 32);
			atomicOr(GetBuffer(VisibilityBuffer, cull_info.visibility_buffer).submeshes[gID/32], bitset);
#endif
		}
	}
}