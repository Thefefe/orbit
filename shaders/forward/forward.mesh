#version 460

#include "../include/common.glsl"
#include "../include/types.glsl"
#include "../include/functions.glsl"

#extension GL_EXT_mesh_shader : require

#include "forward_common.glsl"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MESHLET_VERTEX_COUNT, max_primitives = MESHLET_TRIANGLE_COUNT) out;

layout(location = 0) out VERTEX_OUTPUT vout[];

taskPayloadSharedEXT MeshTaskPayload payload;

void main() {
    uint meshlet_index = payload.meshlet_offset + payload.meshlet_indices[gl_WorkGroupID.x];
    uint entity_index = payload.entity_index;

    Meshlet meshlet = GetBuffer(MeshletBuffer, meshlet_buffer).meshlets[meshlet_index];

    SetMeshOutputsEXT(meshlet.vertex_count, meshlet.triangle_count);

    mat4 mvp_matrix = 
        GetBuffer(PerFrameBuffer, per_frame_buffer).view_projection *
        GetBuffer(EntityBuffer, entity_buffer).entities[entity_index].model_matrix;

    for (uint vi = gl_LocalInvocationID.x; vi < meshlet.vertex_count; vi += gl_WorkGroupSize.x) {
        uint vertex_index = meshlet.vertex_offset + GetBuffer(MeshletDataBuffer, meshlet_data_buffer).vertex_indices[meshlet.data_offset + vi];
        MeshVertex vertex = GetBuffer(VertexBuffer, vertex_buffer).vertices[vertex_index];

        vout[vi].world_pos = 
            GetBuffer(EntityBuffer, entity_buffer).entities[entity_index].model_matrix *
            vec4(vertex.position[0], vertex.position[1], vertex.position[2], 1.0);

        gl_MeshVerticesEXT[vi].gl_Position = mvp_matrix * vec4(vertex.position[0], vertex.position[1], vertex.position[2], 1.0);

        vout[vi].uv = vertex.uv;
        
        mat3 normal_matrix = mat3(GetBuffer(EntityBuffer, entity_buffer).entities[entity_index].normal_matrix);

        // unpack_normal_tangent(vertex.packed_normals, vout[vi].normal, vout[vi].tangent);
        vec3 normal  = vec3(vertex.normal) / 127.0;
        vec4 tangent = vec4(vertex.tangent) / 127.0;
        
        vout[vi].normal  = normalize(normal_matrix * normal);
        vout[vi].tangent = vec4(normalize(normal_matrix * tangent.xyz), tangent.w);

        uint material_index = GetBuffer(MeshletBuffer, meshlet_buffer).meshlets[meshlet_index].material_index;
        vout[vi].material_index = GetBuffer(PerFrameBuffer, per_frame_buffer).render_mode == 9 ? meshlet_index : material_index;
    }

    for (uint ti = gl_LocalInvocationID.x; ti < meshlet.triangle_count; ti += gl_WorkGroupSize.x) {
        uint triangle_offset = (meshlet.data_offset + meshlet.vertex_count) * 4 + ti * 3;
        gl_PrimitiveTriangleIndicesEXT[ti] = uvec3(
            GetBuffer(MeshletTriangleDataBuffer, meshlet_data_buffer).indices[triangle_offset],
            GetBuffer(MeshletTriangleDataBuffer, meshlet_data_buffer).indices[triangle_offset + 1],
            GetBuffer(MeshletTriangleDataBuffer, meshlet_data_buffer).indices[triangle_offset + 2]
        );
    }
}