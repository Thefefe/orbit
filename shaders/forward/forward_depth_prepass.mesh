#version 460

#include "../include/common.glsl"
#include "../include/types.glsl"
#include "../include/functions.glsl"

#extension GL_EXT_mesh_shader : require

layout (constant_id = 0) const int GROUP_SIZE = 32;
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MESHLET_VERTEX_COUNT, max_primitives = MESHLET_TRIANGLE_COUNT) out;

layout(push_constant) uniform PushConstants {
    mat4 view_proj;
    uint draw_command_buffer;
    uint cull_info_buffer;
    uint vertex_buffer;
    uint meshlet_buffer;
    uint meshlet_data_buffer;
    uint entity_buffer;
    uint materials_buffer;
};

layout(location = 0) out VertexOutput {
    vec2 uv;
    flat uint material_index;
} vout[];

taskPayloadSharedEXT MeshTaskPayload payload;

void main() {
    uint meshlet_index = payload.meshlet_offset + payload.meshlet_indices[gl_WorkGroupID.x];
    uint entity_index = payload.entity_index;

    Meshlet meshlet = GetBuffer(MeshletBuffer, meshlet_buffer).meshlets[meshlet_index];

    SetMeshOutputsEXT(meshlet.vertex_count, meshlet.triangle_count);

    mat4 mvp_matrix = view_proj * GetBuffer(EntityBuffer, entity_buffer).entities[entity_index].model_matrix;
    const uint vertex_loops = (MESHLET_VERTEX_COUNT + GROUP_SIZE - 1) / GROUP_SIZE;
    for (uint loop = 0; loop < vertex_loops; loop += 1) {
        uint vi = min(gl_LocalInvocationIndex + loop * GROUP_SIZE, meshlet.vertex_count);
        
        uint vertex_index = meshlet.vertex_offset + GetBuffer(MeshletDataBuffer, meshlet_data_buffer).vertex_indices[meshlet.data_offset + vi];
        MeshVertex vertex = GetBuffer(VertexBuffer, vertex_buffer).vertices[vertex_index];
        gl_MeshVerticesEXT[vi].gl_Position = mvp_matrix * vec4(vertex.position[0], vertex.position[1], vertex.position[2], 1.0);

        vout[vi].uv = vec2(vertex.uv_coord[0], vertex.uv_coord[1]);
        vout[vi].material_index = GetBuffer(MeshletBuffer, meshlet_buffer).meshlets[meshlet_index].material_index;
    }

    const uint triangle_loops = (MESHLET_TRIANGLE_COUNT + GROUP_SIZE - 1) / GROUP_SIZE;
    for (uint loop = 0; loop < triangle_loops; loop += 1) {
        uint ti = min(gl_LocalInvocationIndex + loop * GROUP_SIZE, meshlet.triangle_count);
        uint triangle_offset = (meshlet.data_offset + meshlet.vertex_count) * 4 + ti * 3;
        gl_PrimitiveTriangleIndicesEXT[ti] = uvec3(
            GetBuffer(MeshletTriangleDataBuffer, meshlet_data_buffer).indices[triangle_offset],
            GetBuffer(MeshletTriangleDataBuffer, meshlet_data_buffer).indices[triangle_offset + 1],
            GetBuffer(MeshletTriangleDataBuffer, meshlet_data_buffer).indices[triangle_offset + 2]
        );
    }
}