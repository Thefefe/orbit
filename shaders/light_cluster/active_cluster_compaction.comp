#version 460

#include "../include/common.glsl"
#include "../include/types.glsl"
#include "../include/functions.glsl"

#include "cluster_common.glsl"

layout(push_constant, std430) uniform PushConstants {
    uvec3 cluster_count;
    uint mask_buffer;
    uint unique_cluster_buffer;
};

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

void main() {
    // if (gl_GlobalInvocationID == uvec3(0)) {
    //     GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).cluster_count = 0;
    // }

    // barrier();

    if (gl_GlobalInvocationID.x < cluster_count.x &&
        gl_GlobalInvocationID.y < cluster_count.y &&
        gl_GlobalInvocationID.z < cluster_count.z)
    {
        const uvec3 cluster_id = gl_GlobalInvocationID;
        uint cluster_index  = cluster_volume_index_from_id(cluster_count, cluster_id);

        if (is_cluster_active(mask_buffer, cluster_count, cluster_id)) {
            uint unique_index = atomicAdd(GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).cluster_count, 1);
            GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).cluster_indices[unique_index] = cluster_index;
        }
    }

    // barrier();
    
    if (gl_LocalInvocationIndex == 0) {
        uint finished_workgroups = atomicAdd(GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).workgroup_count_x, 1);

        if (finished_workgroups + 1 == gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_NumWorkGroups.z) {
            uint cluster_count = GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).cluster_count;
            uint workgroup_count_x = div_ceil(cluster_count, 256);
            GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).workgroup_count_x = workgroup_count_x;
            GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).workgroup_count_y = 1;
            GetBuffer(CompactedClusterIndexList, unique_cluster_buffer).workgroup_count_z = 1;
        }
    }
}