#version 460

#include "include/common.glsl"
#include "include/types.glsl"

layout(push_constant, std430) uniform PushConstants {
    SubmeshBuffer submesh_buffer;
	MeshInfoBuffer mesh_info_buffer;
	DrawCommandsBuffer draw_commands_buffer;
};

layout (local_size_x = 256) in;

void main() {
	draw_commands_buffer.count = 0;
    uint gID = gl_GlobalInvocationID.x;
	if (gID < submesh_buffer.count) {
		Submesh submesh = submesh_buffer.submeshes[gID];
		MeshInfo mesh_info = mesh_info_buffer.mesh_infos[submesh.mesh_index];

		// TODO: culling, subgroup ballot
		bool visible = true;

		if (visible) {
			uint draw_index = atomicAdd(draw_commands_buffer.count, 1);

			draw_commands_buffer.commands[gID].index_count 	 = mesh_info.index_count;
			draw_commands_buffer.commands[gID].instance_count = 1;
			draw_commands_buffer.commands[gID].first_index    = mesh_info.index_offset;
			draw_commands_buffer.commands[gID].vertex_offset  = mesh_info.vertex_offset;
			draw_commands_buffer.commands[gID].first_instance = submesh.entity_index;
			draw_commands_buffer.commands[gID].material_index = submesh.material_index;
		}
	}
}